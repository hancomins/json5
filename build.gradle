


buildscript {
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath 'org.bouncycastle:bcpg-jdk15on:1.70'
        def path = new File("${projectDir}/libs-build").getCanonicalFile().getAbsolutePath();

        classpath fileTree(dir:path, include: ['*.jar'])
    }
}
import com.hancomins.util.JarSign
import com.hancomins.util.PomBuilder

plugins {
    id 'java'
}




sourceCompatibility = 1.8
targetCompatibility = 1.8
def JAVA_VERSION = 1.8

def signPropsFilePath =  getAbsolutePath("${projectDir}/sign.properties");
Properties signProperties = new Properties()
if (file(signPropsFilePath).exists()) {
    try(InputStream inputStream = new FileInputStream(signPropsFilePath)) {
        signProperties.load(inputStream)
    }
    String keyRingFilePath = getAbsolutePath(signProperties.getProperty(JarSign.PROPERTY_KEY_SECRET_KEY_RING_FILE, ''))
    signProperties.setProperty(JarSign.PROPERTY_KEY_SECRET_KEY_RING_FILE, keyRingFilePath);
}





apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply from: "${rootDir}/scripts/publish-maven.gradle"
apply from: 'publish.gradle'


group 'io.github.hancomins'
version getProperty("version")

repositories {
    mavenCentral()
}


compileTestJava.options.encoding = 'UTF-8'
compileJava.options.encoding = 'UTF-8'


java {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}


javadoc {
    source = sourceSets.main.allJava
    def includes = ['com/hancomins/json5/*']

    include includes

    destinationDir = file("$buildDir/docs/javadoc")

    // 문서 생성 시 사용될 옵션 (선택 사항)
    options {
        encoding 'UTF-8'
        charSet 'UTF-8'
        author true
        version true
    }
}



jar {
    group = 'build'
    archiveBaseName.set("json5")

    manifest {
        attributes(
                'Implementation-Title': 'json5',       // 프로젝트 제목
                'Implementation-Version': project.version,          // 프로젝트 버전
                'Implementation-Vendor': 'HANCOM INNOSTREAM',      // 제작자 또는 회사 이름
                'Built-By': 'Sungbeom HONG', // 빌드한 사람
                'Build-Jdk': "${JAVA_VERSION}", // JDK 버전
                'Created-By': "Gradle ${gradle.gradleVersion}"  // Gradle 버전
        )
    }

    from('LICENSE') {
        into('/')
    }

    doLast {
        def jarFilePath = archiveFile.get().asFile.path
        JarSign.sign(jarFilePath, signProperties);
    }
}



dependencies {
    testImplementation group: 'org.json', name: 'json', version: '20240303'
// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    //testImplementation group: 'junit', name: 'junit', version: '4.+'
    // junit 5
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    testImplementation 'org.json:json:20240303'


// https://mvnrepository.com/artifact/com.hancomins.cson.container.fastjson2/fastjson2
   // testImplementation 'com.hancomins.json.container.fastjson2:fastjson2:2.0.53'


}

// test.onlyIf { !project.hasProperty("skipTests") || project.skipTests != "true" } // skipTests 속성이 true인 경우 테스트를 건너뜀


task jarJavadoc(type: Jar, dependsOn: javadoc) {
    group = 'build'
    archiveBaseName.set("json5")
    from javadoc.destinationDir
    archiveClassifier.set('javadoc') // Gradle 6.4 이상에서는 이 방법을 사용


    manifest {
        attributes(
                'Implementation-Title': ':json5',       // 프로젝트 제목
                'Implementation-Version': project.version,          // 프로젝트 버전
                'Implementation-Vendor': 'HANCOM INNOSTREAM',      // 제작자 또는 회사 이름
                'Built-By': 'Sungbeom HONG', // 빌드한 사람
                'Created-By': "Gradle ${gradle.gradleVersion}"  // Gradle 버전
        )
    }

    from('LICENSE') {
        into('/')
    }

    doLast {
        def jarFilePath = archiveFile.get().asFile.path
        JarSign.sign(jarFilePath, signProperties);
    }
}

task jarSources(type: Jar) {
    group = 'build'
    archiveBaseName.set("json5")
    from sourceSets.main.allSource
    archiveClassifier.set('sources') // Gradle 6.4 이상에서는 이 방법을 사용


    manifest {
        attributes(
                'Implementation-Title': ':json5',       // 프로젝트 제목
                'Implementation-Version': project.version,          // 프로젝트 버전
                'Implementation-Vendor': 'HANCOM INNOSTREAM',      // 제작자 또는 회사 이름
                'Built-By': 'Sungbeom HONG', // 빌드한 사람
                'Build-Jdk': "${JAVA_VERSION}", // JDK 버전
                'Created-By': "Gradle ${gradle.gradleVersion}"  // Gradle 버전
        )
    }

    from('LICENSE') {
        into('/')
    }

    doLast {
        def jarFilePath = archiveFile.get().asFile.path
        JarSign.sign(jarFilePath, signProperties);
    }
}


task makePom {
    group = 'build'
    doLast {
        def pomFilePath = "${buildDir}/libs/json5-${version}.pom"

        PomBuilder.builder()
        PomBuilder.Developer developer = PomBuilder.newDeveloper("Sungbeom Hong")
                .setEmail("ice3x2@hancomins.com")
                .setOrganization("HANCOM INNOSTREAM")
                .setOrganizationUrl("https://github.com/hancomins").setId("ice3x2");

        PomBuilder.SCM scm = PomBuilder.newSCM("hancomins/json5");

        PomBuilder.builder().setGroupId("io.github.hancomins")
                .setArtifactId("json5")
                .setVersion("${version}")
                .setName("json5")
                .setUrl("https://github.com/hancomins/json5")
                .setDescription("A JSON5 library for configuration files. Supports comments.")
                .addDeveloper(developer)
                .setScm(scm)
                .writeFile(pomFilePath);

        JarSign.sign(pomFilePath, signProperties);
    }
}


task dist() {
    group = 'distribution'
    dependsOn build
    dependsOn makePom
    doLast {
        def sourceDir = new File("${buildDir}/libs")
        def targetDir = new File("${buildDir}/dist/io/github/hancomins/json5/${version}")
        def zipFile = new File("${buildDir}/dist/json5-${version}.zip")

        // 1. 대상 디렉토리 생성
        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        // 2. 파일 복사
        sourceDir.eachFile { file ->
            def destFile = new File(targetDir, file.name)
            file.withInputStream { is ->
                destFile.withOutputStream { os ->
                    os << is
                }
            }
        }

        // 3. 파일 압축
        zipFile.withOutputStream { fos ->
            new java.util.zip.ZipOutputStream(fos).withCloseable { zos ->
                targetDir.eachFileRecurse { file ->
                    if (file.isFile()) {
                        def relativePath = file.path.replace(targetDir.path + File.separator, "")
                        def entryName = "io/github/hancomins/json5/${version}/" + relativePath
                        zos.putNextEntry(new java.util.zip.ZipEntry(entryName))
                        file.withInputStream { fis ->
                            zos << fis
                        }
                        zos.closeEntry()
                    }
                }
            }
        }

        println "Files from ${sourceDir} copied to ${targetDir} and zipped into ${zipFile}"


    }
}



build.dependsOn(jarJavadoc)
build.dependsOn(jarSources)




test {
    useJUnitPlatform()
}



String getAbsolutePath(String path) {
    if (path.startsWith("/") || path.matches("^[a-zA-Z]:.*")) {
        return file(path).getCanonicalFile().getAbsolutePath();
    } else {
        return file("${rootDir}/${path}").getCanonicalFile().getAbsolutePath();
    }
}


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION